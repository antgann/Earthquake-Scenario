<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- START SNIPPET: example -->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">


    <!-- EEW add 3 beans for encryption -->
    <bean id="environmentVariablesConfiguration" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
      <property name="algorithm" value="PBEWithMD5AndDES" />
      <property name="passwordEnvName" value="ACTIVEMQ_ENCRYPTION_PASSWORD" />
    </bean>

    <bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
      <property name="config" ref="environmentVariablesConfiguration" />
    </bean>

    <bean id="propertyConfigurer" class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
      <constructor-arg ref="configurationEncryptor" />
        <property name="locations">
         <list>
            <value>file:${activemq.base}/conf/credentials-enc.properties</value>
            <value>file:${activemq.properties}</value>
         </list>
      </property>
    </bean>

    <!-- Allows log searching in hawtio console -->
<!-- 
    <bean id="logQuery" class="org.fusesource.insight.log.log4j.Log4jLogQuery"
          lazy-init="false" scope="singleton"
          init-method="start" destroy-method="stop">
    </bean>
-->

    <import resource="camel.xml"/>

    <!--
        The <broker> element is used to configure the ActiveMQ broker.
    -->    

    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="${activemq.brokername}" dataDirectory="${activemq.data}" useJmx="true" persistent="false">
	<destinationPolicy>
	    <policyMap>
	      <policyEntries>
                <policyEntry topic=">" producerFlowControl="false">
                </policyEntry>
                <policyEntry queue=">" producerFlowControl="false">
                </policyEntry>

                <policyEntry topic="eew.sys.*.data">
                    <pendingMessageLimitStrategy>
                        <!--keep no messages around other than the prefetch amount -->
                        <constantPendingMessageLimitStrategy limit="0"/>
                    </pendingMessageLimitStrategy>
                </policyEntry>
                <policyEntry topic="eew.sys.*.hb">
                    <pendingMessageLimitStrategy>
                        <constantPendingMessageLimitStrategy limit="0"/>
                    </pendingMessageLimitStrategy>
                </policyEntry>
                <policyEntry topic="eew.alg.>">
                    <pendingMessageLimitStrategy>
                        <!--keep 100 messages beyond prefetch amount -->
                        <constantPendingMessageLimitStrategy limit="10"/>
                    </pendingMessageLimitStrategy>
                </policyEntry>
                <policyEntry topic="eew.calibration">
                    <pendingMessageLimitStrategy>
                        <!--keep 100 messages beyond prefetch amount -->
                        <constantPendingMessageLimitStrategy limit="10"/>
                    </pendingMessageLimitStrategy>
                </policyEntry>
                <policyEntry topic="eew.admin.actions>">
                    <pendingMessageLimitStrategy>
                        <!--keep 100 messages beyond prefetch amount -->
                        <constantPendingMessageLimitStrategy limit="10"/>
                    </pendingMessageLimitStrategy>
                </policyEntry>

              </policyEntries>
            </policyMap>
	</destinationPolicy>

        <!--
            The managementContext is used to configure how ActiveMQ is exposed in
            JMX. By default, ActiveMQ uses the MBean server that is started by
            the JVM. For more information, see:

            http://activemq.apache.org/jmx.html
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <!--
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag).
            For more information, see:

            http://activemq.apache.org/persistence.html
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/kahadb"/>
        </persistenceAdapter>


          <!--
            The systemUsage controls the maximum amount of space the broker will
            use before disabling caching and/or slowing down producers. For more information, see:
            http://activemq.apache.org/producer-flow-control.html
          -->
          <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage percentOfJvmHeap="75" />
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="2 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <plugins xmlns:spring="http://www.springframework.org/schema/beans">
          <jaasAuthenticationPlugin configuration="activemq" />
          <authorizationPlugin>
            <map>
              <authorizationMap>
                <authorizationEntries>            
                  <authorizationEntry queue=">" read="admins" write="admins" admin="admins" />
                  <authorizationEntry queue="USERS.>" read="users" write="users" admin="users" />
                  <authorizationEntry queue="GUEST.>" read="guests" write="guests,users" admin="guests,users" />
                  <authorizationEntry topic=">" read="admins" write="admins" admin="admins" />
                  <authorizationEntry topic="EEW.eew.>" read="algReaders" write="algWriters" admin="algWriters,eewadmins,admins" />
                  <authorizationEntry topic="eew.alg.>" read="algReaders" write="algWriters" admin="algWriters,eewadmins,admins" />
                  <authorizationEntry topic="eew.calibration" read="calReaders" write="calWriters" admin="calWriters,eewadmins,admins" />
                  <authorizationEntry topic="eew.test.>" read="testReaders" write="testWriters" admin="testWriters,eewadmins,admins" />
                  <authorizationEntry topic="eew.*.*.hb" read="hbReaders" write="hbWriters" admin="hbReaders,hbWriters,eewadmins,admins" />
                  <authorizationEntry topic="eew.sys.news.data" read="everyone" write="newsWriters" admin="everyone,sysWriters,eewadmins,admins" />
                  <authorizationEntry topic="eew.sys.ha.data" read="everyone" write="newsWriters" admin="everyone,sysWriters,eewadmins,admins" />
                  <authorizationEntry topic="ActiveMQ.Advisory.>" read="everyone" write="everyone" admin="everyone,sysWriters,eewadmins,admins" />   
                  <authorizationEntry topic="eew.test_ShakeOut.*.data" read="ShakeOut" write="ShakeOut" admin="ShakeOut" />
                  <authorizationEntry topic="eew.test_guest1.*.data" read="guest1" write="guest1" admin="guest1" />
                  <authorizationEntry topic="eew.test_guest2.*.data" read="guest2" write="guest2" admin="guest2" />
                  <authorizationEntry topic="eew.test_AndroidEngine.*.data" read="AndroidEngine" write="AndroidEngine" admin="AndroidEngine" />

                  <authorizationEntry topic="eew.sys.CAPForIPAWS.data" read="everyone" write="jbunn,ggann" admin="jbunn,ggann" />
                  <authorizationEntry topic="eew.sys.ACKFromIPAWS.data" read="everyone" write="jbunn,ggann" admin="jbunn,ggann" />
                  <authorizationEntry topic="eew.sys.SAforCAPOut.data" read="everyone" write="jbunn,ggann" admin="jbunn,ggann" />
                </authorizationEntries>
                <tempDestinationAuthorizationEntry>
                  <tempDestinationAuthorizationEntry read="everyone,tempDestinationAdmins,admins" write="everyone,tempDestinationAdmins,admins" admin="everyone,tempDestinationAdmins,admins"/>
                </tempDestinationAuthorizationEntry>
              </authorizationMap>
            </map>
          </authorizationPlugin>

          <bean xmlns="http://www.springframework.org/schema/beans"
                id="MonitorBrokerPlugin" class="eew.broker.plugins.MonitorBrokerPlugin">
		<property name="adminPassword" value="admin12345"/>
          </bean>

        </plugins>


    <sslContext>
        <sslContext keyStore="alert.eew.shakealert.org.ks" keyStorePassword="${keystore.password}"
        trustStore="alert.eew.shakealert.org.ts" trustStorePassword="${truststore.password}"/>
    </sslContext>
        <!--
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see:

            http://activemq.apache.org/configuring-transports.html
        -->
        <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB 
            <transportConnector name="auto+ssl" uri="auto+ssl://0.0.0.0:${activemq.auto_ssl.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;jms.watchTopicAdvisories=false"/>
            <transportConnector name="auto" uri="auto://0.0.0.0:${activemq.auto.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;jms.watchTopicAdvisories=false"/>
            <transportConnector name="ssl" uri="ssl://0.0.0.0:${activemq.ssl.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;jms.watchTopicAdvisories=false"/> -->
            <transportConnector name="auto+ssl" uri="auto+ssl://0.0.0.0:${activemq.auto_ssl.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="auto" uri="auto://0.0.0.0:${activemq.auto.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="ssl" uri="ssl://0.0.0.0:${activemq.ssl.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="ws" uri="ws://0.0.0.0:${activemq.ws.port}?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<!--        <transportConnector name="openwire" uri="tcp://0.0.0.0:63009?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>   
            <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
-->
        </transportConnectors>

        <!-- destroy the spring context on shutdown to stop jetty -->
        <shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook"/>
        </shutdownHooks>

    </broker>
</beans>
